1. Product Details

When to cache:

Cache the product detail page or API response on GET requests to the product detail endpoint (e.g., /api/products/<id>/) â€” when user views product info.

When to invalidate:

On POST/PUT/PATCH/DELETE to product update endpoints (e.g., price update, stock change).

Or on signals like post_save/post_delete of the product model.

Also when related models change (e.g., product images).

2. Category and Search Listings

When to cache:

Cache the response for GET requests to category listing or search endpoints (e.g., /api/categories/<id>/products/ or /api/search/?q=shoes) to avoid hitting DB repeatedly.

When to invalidate:

When products are added, removed, or updated within that category (usually on product create/update/delete).

Could be triggered by signals or background jobs that clear cache for affected categories.

3. Navigation Menus and Static Components

When to cache:

Cache menus and site-wide static components once, on first load or periodically in background.

Use a long cache time because these change rarely.

When to invalidate:

When categories or menu structure is changed (e.g., new category added or removed).

Usually on admin updates or specific management commands.

4. User Sessions

When to cache:

Sessions are cached automatically by Django when user logs in or any session data is set.

When to invalidate:

Session expires (timeout), or user logs out, or session is explicitly cleared.

Handled by Django session framework and Redis backend automatically.

5. Shopping Carts

When to cache:

Cache cart data every time a cart is created or updated (add/remove item, quantity change).

This is typically done on POST/PUT/PATCH calls that modify the cart.

When to invalidate:

Expire cache after a set timeout (e.g., 30 days) or when the user completes the order (empties the cart).

Also clear cache if cart is deleted or merged.

6. Permissions and Auth Checks

When to cache:

Cache user permissions or roles after login or when permission data is first requested.

When to invalidate:

When user roles or permissions are updated (e.g., admin changes user roles).

Usually on admin updates or explicit permission changes.

7. Inventory Counts

When to cache:

Cache on GET requests for product availability or stock count.

When to invalidate:

On stock update events (e.g., after purchase, restock, returns).

Use short TTL (30 seconds to 2 minutes) so cache naturally refreshes quickly.
